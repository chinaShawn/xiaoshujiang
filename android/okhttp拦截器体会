OKHttp中有两种拦截器，一种是Interceptor，另一种是NetworkInterceptor，关于这两种的不一样，在有网页跳转时，调用的次数是不一样的，这个在github下的相应的wiki里有介绍。https://github.com/square/okhttp/wiki/Interceptors
还有一张图可以很明白的说明这个问题。这张图存在android 图片下了《okhttp拦截器》

看我自己写的一个OkHttp拦截器的例子：
private OkHttpClient httpClient = new OkHttpClient.Builder()
//            .addInterceptor(new HttpLoggingInterceptor(message -> Log.i("RetrofitLog","retrofitBack = "+message))
//                    .setLevel(HttpLoggingInterceptor.Level.BODY))
            .addNetworkInterceptor(new Interceptor() {
                @Override
                public Response intercept(Chain chain) throws IOException {
                    Log.d("OKHttp3---3","before chain proceed");
                    okhttp3.Response response = chain.proceed(chain.request());
                    Log.d("OKHttp3---3","after chain proceed");
                    return response;
                }
            })
            .addInterceptor(new Interceptor() {
                @Override
                public Response intercept(Chain chain) throws IOException {
                    Log.d("OKHttp3---1","before chain proceed");
                    Log.d("OKHttp3---1","after chain proceed");
                    okhttp3.Response response = chain.proceed(chain.request());

                    return response;
                }
            })
            .addInterceptor(new Interceptor() {
                @Override
                public Response intercept(Chain chain) throws IOException {
                    okhttp3.Response response = chain.proceed(chain.request());
                    Log.d("OKHttp3---2","before chain proceed");
                    Log.d("OKHttp3---2","after chain proceed");
                    return response;
                }
            })
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .cache(cache)
            .build();
            
 调用该retrofit打印出的数据应该是："OKHttp3---1","before chain proceed"--》"OKHttp3---1","after chain proceed"--》 Log.d("OKHttp3---3","before chain proceed");
 --》"OKHttp3---3","after chain proceed"--》"OKHttp3---2","before chain proceed"--》"OKHttp3---2","after chain proceed"
 所有的控制打印顺序由chain.proceed(chain.request())来控制，在该条前面的流程将在请求数据中做，该条后面的流程将在数据返回的response中去做。
 
            
            
  下面是选择哪一种interceptor的适用场景。
Choosing between application and network interceptors

Each interceptor chain has relative merits.

Application interceptors

Don't need to worry about intermediate responses like redirects and retries.
不用关心中间的重定向和重复次数的返回结果。
Are always invoked once, even if the HTTP response is served from the cache.
永远之后被调用一次，即使http的返回值是中缓存中拿到的。
Observe the application's original intent. Unconcerned with OkHttp-injected headers like If-None-Match.
观察应用最原始的意图，不不关心像lf-none-match这样的okHttp注入的头图信息。
Permitted to short-circuit and not call Chain.proceed().
允许短路或者不调用chain.proceed().
Permitted to retry and make multiple calls to Chain.proceed().
允许重复和多次调用chain.proceed().
Network Interceptors

Able to operate on intermediate responses like redirects and retries.
有能力操作重定向和重复访问的中间结果。
Not invoked for cached responses that short-circuit the network.
在使用缓存的情况下没有访问网络时，不会被调用。
Observe the data just as it will be transmitted over the network.
观察即将通过网络传播的数据
Access to the Connection that carries the request.
获取到一个拥有request的Connection。
