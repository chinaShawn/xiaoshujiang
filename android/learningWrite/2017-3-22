1，copyOnWriteArrayList是一个解决并发list的方案，其核心思想就是读写分离，对写动作需要加锁，并且在复制数据上进行写操作，最后将指针指向新的copylist，在多线程对同一list进行操作的过程中，所有的操作都会被添加到该list上去，所有的读操作伴随着写的变化，也相应的变化。

2，
修饰语            自己 同包  子类  所有类
public            是    是    是     是
default（不写）    是    是    不是  不是
protected         是    不是  不是   不是
private           是    不是  不是   不是


类没有protected和private的修饰，除了内部类可以使用任意的修饰符之外。


属性和方法都可以被任意的修饰限定语限定，其可达域收到类的影响。

3，list的实质是用数组实现的，是对数组的一个补充，ArrayList的查询都是O（1）的时间复杂度，但是插入和删除在最坏的情况下，也就是是在位置0插入和删除，将会移动所有的元素一遍，时间复杂度变为o（n），这个时候linkedList就有了它的好处，在插入和删除的时候都是o（1）的时间复杂度，而在查询的时候最坏也是o（n）的时间复杂度。LinkedList使用的就是doubleList。

class node{
T t;
node previous,last

......

}

4，初始化ArrayList其实就是新建了一个ArrayList的类，然后使用static方法：
List<Integer> list = new ArrayList(){
{
  add(3);
  add(5);
}
}

Array.asList(array[])得到的是一个ArrayList,但是却是Array类的一个私有类，并且这个私有类有很多的方法没有实现，Array的主要责任是针对Array数组做了很多有效的方法供我们操作数组。



5，关于list的遍历中修改元素的过程，list总共有3种遍历的方式，



第一种：
    for(int i=0;i<list.size();i++){
       list.remove(i);
       break;
       该方法也可以对list进行一次修改，需要在此处break挑出，否则将会报错，出错的原因主要是再遍历下一次数据的时候会做相应的检查，检查是否在遍历的时候对数据进行了修改。
    }
第二种：
  for(T t: list){
    
  list.remove(t);
  break;
  该方法可以对list进行一次更改，需要在此处break跳出，否则将会报错。出错的原因主要是再遍历下一次数据的时候会做相应的检查。
  }


第三种：
for(Iterator<T> it= list.isterator();it.hasNext();){
T t = it.next();

it.remove()
it.add()
这种方法可以进行list的遍历修改过程，并且可以修改多次，但是只能在单线程中运行，一旦在多线程中就会爆发并发错误
}

