1，Iterator和listIterator，这两个iterator还是有所不一样的
我们可以看一下iterator中的方法：
    boolean hasNext();
    E next();
    default void remove() {
        throw new UnsupportedOperationException("remove");
    }
    default void forEachRemaining(Consumer<? super E> action) {
        Objects.requireNonNull(action);
        while (hasNext())
            action.accept(next());
    }
总共就只有这四个方法。再来看看ListIterator中的方法：
    boolean hasNext();
    E next();
    boolean hasPrevious();
    E previous();
    int nextIndex();
    int previousIndex();
    void remove();
    void set(E e);
    void add(E e);

一对比很容易就出来了，多了很多个方法：hasprevious(),previous(),nextIndex(),previousIndex(),set(),add()
这样我们就很清楚listIterator可以做到更多的事情，包括向前索引，向前遍历，添加元素，修改元素。
但是listIterator只能针对list，对map和set不支持，而iterator都可以用。


2并查集
并查集是一个基本的数据结构，一种解决相通性，互达性的很好的数据结构，一个pre[]数组来表示第i个元素的父类是哪一个，如果父类是自己，那么pre[i]存储的就是自己，find方法，就是查找自己团体的最大父类的过程，自己和一坨与自己相关的人一起构建了一个团里，并且以树的结构表示这个团体，找到最大父类，其实就是找到团长的过程，这是一个递归查找的过程，一层一层的想父类去闻讯，是否是团长，一直问到最大的boss。

并查集的另一个方法是join，就是将两个互相不联通的团里，相互联通，让一个团的团长挂到另一个团里当小兵。在互联的过程中就表示这两个团体有了关系。

在find的过程中可以添加上压缩路径算法，在find的过程中，所有find的路径中的对象的父类都设为最大的boss，也就是都升级为2层领导。
并查集解决的问题，就是在不相交集上的问题。
