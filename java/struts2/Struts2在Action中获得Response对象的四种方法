---
title: Struts2在Action中获得Response对象的四种方法 
tags: 新建,模板,小书匠
grammar_cjkRuby: true
---


### 【方法1】使用Struts2 Aware拦截器
　　这种方法需要Action类实现相应的拦截器接口。如我们要获得HttpServletResponse对象，需要实现org.apache.struts2.interceptor.ServletResponseAware接口，代码如下：
package action;
impor tcom.opensymphony.xwork2.ActionSupport;
impor tjavax.servlet.http.*;
impor torg.apache.struts2.interceptor.*;
public class MyAction extends ActionSupport implements ServletResponseAware
{
　　private javax.servlet.http.HttpServlet Responseresponse;
　　//获得HttpServletResponse对象
　　public void setServletResponse(HttpServletResponse response)
　　{
　　　　this.response=response;
　　}　　
　　public String execute() throwsException
　　{　　
　　　　response.getWriter().write("实现ServletResponseAware接口");
　　}
}
　　在上面的代码中，MyAction实现了一个ServletResponseAware接口，并且实现了setServletResponse方法。如果一个动作类实现了ServletResponseAware接口，Struts2在调用execute方法之前，就会先调用setServletResponse方法，并将response参数传入这个方法。如果想获得HttpServletRequest、HttpSession和Cookie等对象，动作类可以分别实现ServletRequestAware、SessionAware和CookiesAware等接口。这些接口都在org.apache.struts2.interceptor包中。
　如果要获得请求参数，动作类可以实现org.apache.struts2.interceptor. ParameterAware接口，但如果只想判断某个参数是否存在，也可以实现com.opensymphony.xwork2.interceptor. ParameterNameAware接口。这个接口有一个acceptableParameterName方法，当Struts2获得一个请求参数时，就会调用一次。读者可以在这个方法中将所有的请求参数记录下来，以便以后使用。这个方法的定义如下：
boolean acceptableParameterName(String parameterName);


### 【方法2】使用RequestAware拦截器
　　这种方法和第1种方法类似。动作类需要实现一个org.apache.struts2.interceptor.RequestAware接口。所不同的是RequestAware将获得一个com.opensymphony.xwork2.util.OgnlValueStack对象，这个对象可以获得response、request及其他的一些信息。代码如下所示：
　　package action;
import java.util.Map;
import org.apache.struts2.*;
import com.opensymphony.xwork2.ActionSupport;
import javax.servlet.http.*;
import com.opensymphony.xwork2.util.*;
import org.apache.struts2.interceptor.*;
public class FirstAction extends ActionSupport implements RequestAware
{
　　private Map request;
private HttpServletResponse response;
　　public void setRequest(Map request)
　　{
　　　　this.request=request;　　　　
　　}　　
　　public String execute() throwsException
　　{　　
　　　　java.util.Set<String>keys=request.keySet();
　　　　//枚举所有的key值。实际上只有一个key：struts.valueStack
　　　　for(Stringkey:keys)
　　　　　　System.out.println(key);
　　　　//获得OgnlValueStack对象
　　　　OgnlValueStack stack=(OgnlValueStack)myRequest.get("struts.valueStack");
　　　　//获得HttpServletResponse对象
　　　　response= (HttpServletResponse)stack.getContext().get(StrutsStatics.HTTP_RESPONSE);
　　　　response.getWriter().write("实现RequestAware接口");
　　}
}
我们也可以使用StrutsStatics.HTTP_REQUEST、StrutsStatics.PAGE_CONTEXT来获得HttpServletRequest和PageContext对象。这种方法有些麻烦，一般很少用，读者可以作为一个参考。


### 【方法3】使用ActionContext类
　　这种方法比较简单，我们可以通过org.apache.struts2.ActionContext类的get方法获得相应的对象。代码如下：
　　HttpServletResponse response = (HttpServletResponse)
ActionContext.getContext().get(org.apache.struts2.StrutsStatics.HTTP_RESPONSE);
HttpServletRequest request = (HttpServletRequest)
ActionContext.getContext().get(org.apache.struts2.StrutsStatics.HTTP_REQUEST);

### 【方法4】使用ServletActionContext类
　　Struts2为我们提供了一种最简单的方法获得HttpServletResponse及其他对象。这就是org.apache.struts2.ServletActionContext类。我们可以直接使用ServletActionContext类的getRequest、getResponse方法来获得HttpServletRequest、HttpServletResponse对象。代码如下：
　　HttpServletResponse response = ServletActionContext.getResponse()
　　response.getWriter().write("hello world");
　　从这四种方法来看，最后一种是最简单的


